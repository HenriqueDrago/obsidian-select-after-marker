/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var g=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var m=Object.prototype.hasOwnProperty;var u=(i,e)=>{for(var t in e)g(i,t,{get:e[t],enumerable:!0})},w=(i,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of f(e))!m.call(i,n)&&n!==t&&g(i,n,{get:()=>e[n],enumerable:!(s=p(e,n))||s.enumerable});return i};var S=i=>w(g({},"__esModule",{value:!0}),i);var A={};u(A,{default:()=>r});module.exports=S(A);var a=require("obsidian"),M={marker:"+++",ignoreWhitespaceAfterMarker:!1},l=class extends a.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Select Content Below Marker Settings"}),new a.Setting(e).setName("Marker String").setDesc("Enter the string that marks the beginning of the content to be selected.").addText(t=>t.setPlaceholder("Enter your marker").setValue(this.plugin.settings.marker).onChange(async s=>{this.plugin.settings.marker=s,await this.plugin.saveSettings()})),new a.Setting(e).setName("Ignore Whitespace After Marker").setDesc("Toggle to ignore whitespace (line breaks, tabs, spaces...) immediatelly after the marker.").addToggle(t=>t.setValue(this.plugin.settings.ignoreWhitespaceAfterMarker).onChange(async s=>{this.plugin.settings.ignoreWhitespaceAfterMarker=s,await this.plugin.saveSettings()}))}},r=class extends a.Plugin{async onload(){await this.loadSettings(),this.addCommand({id:"select-content-below-marker",name:"Select text below marker",editorCallback:(e,t)=>{let s=e.getValue(),n=this.settings.marker,c=s.indexOf(n);if(c!==-1){let o=c+n.length;if(this.settings.ignoreWhitespaceAfterMarker){let h=s.substring(o).match(/^\s+/);h&&(o+=h[0].length)}let d=e.offsetToPos(o),k=e.offsetToPos(s.length);e.setSelection(d,k),new a.Notice(`Content below "${n}" selected.`)}else new a.Notice(`Marker "${n}" not found.`)}}),this.addSettingTab(new l(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},M,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};
